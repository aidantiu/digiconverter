services:
  mongo:
    image: mongo:6
    container_name: digiconverter-mongo-prod
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_data_prod:/data/db
    networks:
      - digiconverter-network
    restart: always

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    container_name: digiconverter-server-prod
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGO_URI: ${MONGO_URI}
      JWT_SECRET: ${JWT_SECRET}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
    env_file:
      - ./server/.env.production
    depends_on:
      - mongo
    volumes:
      - ./server/logs:/app/logs
    networks:
      - digiconverter-network
    restart: always

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    container_name: digiconverter-client-prod
    environment:
      NODE_ENV: production
    depends_on:
      - backend
    networks:
      - digiconverter-network
    restart: always

  nginx:
    image: nginx:alpine
    container_name: digiconverter-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - digiconverter-network
    restart: always

volumes:
  mongo_data_prod:
    driver: local

networks:
  digiconverter-network:
    driver: bridge